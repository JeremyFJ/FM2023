ylab("Weight (g)") +
ggtitle("Length at Weight of Ruffe") +
scale_color_manual(values = c("female" = "maroon", "male" = "skyblue3", "unknown" = "grey55"))
ggplot() +
geom_point(data=ruf, aes(x=length, y=weight, shape=sex), size=2.5) +
xlab("Total Length (mm)") + ylab("Weight (g)") +
ggtitle("Length at Weight of Ruffe")
ggplot() +
geom_point(data=ruf, aes(x=length, y=weight, shape=sex), size=1.5) +
xlab("Total Length (mm)") + ylab("Weight (g)") +
ggtitle("Length at Weight of Ruffe")
ggplot() +
geom_point(data=ruf, aes(x=length, y=weight, shape=sex), size=2) +
xlab("Total Length (mm)") + ylab("Weight (g)") +
ggtitle("Length at Weight of Ruffe")
ggplot(ruf, aes(length)) +
geom_bar(aes(fill=sex),width=3) +
xlab("Total Length (mm)") +
scale_fill_manual(values = c("female" = "maroon", "male" = "skyblue3", "unknown" = "grey55")) +
ggtitle("Length Distribution of Ruffe")
model_ruf = nls(weight~a*length^b, start=list(a=160,b=3), data=ruf)
summary(model_ruf)
coef(model_ruf)
ggplot(ruf, aes(x=length,y=weight)) +
geom_point() +
geom_line(data=ruf, aes(x=length,y=predict(model_ruf)), col="red")+
labs(x = "Length (mm)",
y = "Weight (g)",
title = "Weight Length relationship of Lake Superior Ruffe")
plot(model_ruf)
title="Weight and Length Relationship of Lake Superior Ruffe"
rufp1 = ggplot(ruf, aes(log(length),log(weight))) +
geom_point() +
geom_line(aes(x=log(length), y=log(predict(model_ruf))), color="red") +
labs(x = "log (Length)",
y = "log (Width)",
title = title)
rufp2 = ggplot(ruf, aes(x=length,y=weight)) +
geom_point() +
geom_line(aes(x=length,y=predict(model_ruf)),col="red")+
labs(x = "Length (mm)",
y = "Weight (g)",
title = "")
gridExtra::grid.arrange(rufp1, rufp2)
vb = vbFuns(param="Typical") # from FSA package
f.starts <- vbStarts(fl~age,data=RedDrum) # vbStarts is an optimization algorithm designed to find the best params
f.fit <- nls(fl~vb(age,Linf,K,t0),data=RedDrum,start=f.starts)
coef(f.fit)
model_ruf = nls(weight~a*length^b, start=list(a=160,b=3), data=ruf)
summary(model_ruf)
coef(model_ruf)
RuffeSLRH92
RuffeTL89
ggplot(ruf, aes(length)) +
geom_bar(aes(fill=sex),width=3) +
xlab("Total Length (mm)") +
scale_fill_manual(values = c("female" = "maroon", "male" = "skyblue3", "unknown" = "grey55")) +
ggtitle("Length Distribution of Ruffe")
model_ruf = nls(weight~a*length^b, start=list(a=160,b=3), data=ruf)
summary(model_ruf)
coef(model_ruf)
title="Weight and Length Relationship of Lake Superior Ruffe"
rufp1 = ggplot(ruf, aes(log(length),log(weight))) +
geom_point() +
geom_line(aes(x=log(length), y=log(predict(model_ruf))), color="red") +
labs(x = "log (Length)",
y = "log (Width)",
title = title)
rufp2 = ggplot(ruf, aes(x=length,y=weight)) +
geom_point() +
geom_line(aes(x=length,y=predict(model_ruf)),col="red")+
labs(x = "Length (mm)",
y = "Weight (g)",
title = "")
gridExtra::grid.arrange(rufp1, rufp2)
vb = vbFuns(param="Typical") # from FSA package
f.starts <- vbStarts(fl~age,data=RedDrum) # vbStarts is an optimization algorithm designed to find the best params
f.fit <- nls(fl~vb(age,Linf,K,t0),data=RedDrum,start=f.starts)
coef(f.fit)
ggplot() +
geom_point(data=RedDrum, aes(x=age, y=fl)) +
geom_line(data=RedDrum, aes(x=age, y=predict(f.fit)), color="red") +
xlab("Age (years)") +
ylab("Fork Length (mm)") +
ggtitle("Red Drum Length at Age")
# ---- Mortality rate ----------------------------
# get mortality from Then.etal.2014
getMtmax = function(lifespan){
M = 4.899 * lifespan^-0.916
M
}
# get mortality using Dulvy.etal.2004's method
getMDulvy.etal.2004 = function(lifespan, agemat){
w = (lifespan+agemat)/2 # average lifespan
M = 1/w
M
}
getRmax= function(method = "Smith.etal.1998", mortality = "Then.etal.2014", fec = NULL, litter = NULL, cycle = NULL, lifespan, agemat){
# Calculate natural mortality rate
if (mortality== "Dulvy.etal.2004") M = getMDulvy.etal.2004(lifespan = lifespan, agemat = agemat)
if (mortality== "Then.etal.2014") M = getMtmax(lifespan = lifespan)
if (is.numeric(mortality)) M = mortality
if(method=="Smith.etal.1998"){
tmax = lifespan
tmat = agemat
if (is.null(fec)) fec = litter/2/cycle else fec = fec
Z<-1.5*M
#this is equation 7 in the manuscript
l_alpha<-(1-exp(-(Z)))/((fec)*(1-exp(-(Z*(tmax-tmat+1)))))
#this is equation 6 in the manuscript
eq6 <- function(reb) 1-exp(-(M+reb))-l_alpha*(fec)*1.25*exp(-reb*tmat)*(1-exp(-(M+reb)*(tmax-tmat+1)))
r_Z<-uniroot(eq6, c(0,5), tol=1e-8)
return(r_Z$root*2)
}
}
spinyLife = subset(popgrowth(species_list = c("Squalus acanthias")), Locality=="Northwestern Atlantic")
spinyFec = fecundity(species_list = c("Squalus acanthias"))[1,]
spinyMat = subset(maturity(species_list = c("Squalus acanthias")), Locality=="Northwest Atlantic")
lifespan = mean(spinyLife$tmax, na.rm=T)
fecundity = (spinyFec$FecundityMin+spinyFec$FecundityMax) / 2 # mean of minimum and maximum fecundity
agemat = (spinyMat$AgeMatMin + spinyMat$AgeMatMin2) / 2 # mean of two records for minimum age at maturity
rmax = getRmax(method = "Smith.etal.1998", mortality = "Then.etal.2014", fec = fecundity, lifespan = lifespan, agemat = agemat)
paste0("Intrinsic Growth Rate = ", round(rmax, 3))
b = c(0.1,0.1,0.1) # birth rates
d = c(0.04,0.1,0.125) # death rates
N0 = c(500,500,500) # starting population number
Time = seq(0,20,0.5) # time steps
Nt = matrix(NA, nrow = length(Time), ncol = 3)
for (i in 1:3){
Nt[,i] = N0[i]*exp((b[i]-d[i])*Time)
}
plot(Nt[,1]~Time, type = "l", ylim = range(Nt))
lines(Nt[,2]~Time, col = "red")
lines(Nt[,3]~Time, col = "blue")
colnames(RedDrum)
data = RedDrum
glimpse(data)
dim(data) # prints number of rows, columns
plot = ggplot() + geom_point(data=data, mapping=aes(x=age, y=fl),
colour = "black",
size = 3,  # point size
alpha = 0.6, # point transparency
pch=21) +  # point shape
labs(x = "Fork Length (cm)",
y = "Age (years)",
title = "Length at Age Relationship")
plot
RDhist = ggplot(data, aes(fl)) + geom_histogram(binwidth = 20, colour="black", fill="grey") +
xlab("Fork Length (mm)") + ylab("Count") + ggtitle("Red Drum Length Distribution")
RDhist
RDhist2 <- ggplot(data, aes(age)) + geom_histogram(binwidth = 3, colour="black", fill="grey") +
xlab("Age (years)") + ylab("Count") + ggtitle("Red Drum Age Distribution")
RDhist2
RDbox <- ggplot(data, aes(factor(age), fl)) + geom_boxplot() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
xlab("Age (years)") + ylab("Fork Length (mm)") + ggtitle("Red Drum Growth Distribution")
RDbox
ruf = RuffeSLRH92
colnames(ruf)
sapply(ruf,function(x) sum(is.na(x))) # ?sapply
na_rows = which(is.na(ruf$length) | is.na(ruf$weight))
ruf = ruf[-c(na_rows),]
ruf_plot = ggplot() + geom_point(data=ruf, mapping=aes(x=length, y=weight)) +
labs(x = "Total Length (mm)",
y = "Weight (g)",
title = "Length and Weight Relationship of Ruffe")
ruf_plot
ruf_plot = ggplot() + geom_point(data=ruf, mapping=aes(x=log(length), y=log(weight))) +
labs(x = "log Total Length (mm)",
y = "log Weight (g)",
title = "Length and Weight Relationship of Ruffe")
ruf_plot
lm1 <- lm(data=ruf, log(weight)~log(length))
# Basic summary information is extracted by submitting the saved lm() object to summary() as follows
summary(lm1)
ggplot() + geom_point(data=ruf, aes(x=log(length), y=log(weight))) +
geom_line(data=ruf, aes(x=log(length), y=lm1$fitted.values), color="red") +
xlab("log Total Length (mm)") +
ylab("log Weight (g)")
par(mfrow=c(2,2))
plot(lm1)
# Residuals - difference between observed and predicted values
# QQ plot - comparing two probability distributions
# Scale-Location - spread of residuals
# Leverage - influence of data points on residuals
ggplot(ruf, aes(log(length),log(weight))) +
geom_point() +
geom_smooth(method="lm", formula=y~x, color="red") +
xlab("log Total Length (mm)") +
ylab("log Weight (g)") +
annotate("text", x=3.4, y=3, label= paste("R2 =", round(summary(lm1)$r.squared, 3))) # retrieve R-squared value
ggplot() +
geom_point(data=ruf, aes(x=length, y=weight, color=sex)) +
xlab("Total Length (mm)") +
ylab("Weight (g)") +
ggtitle("Length at Weight of Ruffe") +
scale_color_manual(values = c("female" = "maroon", "male" = "skyblue3", "unknown" = "grey55"))
ggplot() +
geom_point(data=ruf, aes(x=length, y=weight, shape=sex), size=2) +
xlab("Total Length (mm)") + ylab("Weight (g)") +
ggtitle("Length at Weight of Ruffe")
ggplot(ruf, aes(length)) +
geom_bar(aes(fill=sex),width=3) +
xlab("Total Length (mm)") +
scale_fill_manual(values = c("female" = "maroon", "male" = "skyblue3", "unknown" = "grey55")) +
ggtitle("Length Distribution of Ruffe")
?nls
model_ruf = nls(weight~a*length^b, start=list(a=160,b=3), data=ruf)
summary(model_ruf)
coef(model_ruf)
coef(model_ruf)
ggplot(ruf, aes(x=length,y=weight)) +
geom_point() +
geom_line(data=ruf, aes(x=length,y=predict(model_ruf)), col="red")+
labs(x = "Length (mm)",
y = "Weight (g)",
title = "Weight Length relationship of Lake Superior Ruffe")
plot(model_ruf)
title="Weight and Length Relationship of Lake Superior Ruffe"
rufp1 = ggplot(ruf, aes(log(length),log(weight))) +
geom_point() +
geom_line(aes(x=log(length), y=log(predict(model_ruf))), color="red") +
labs(x = "log (Length)",
y = "log (Width)",
title = title)
rufp2 = ggplot(ruf, aes(x=length,y=weight)) +
geom_point() +
geom_line(aes(x=length,y=predict(model_ruf)),col="red")+
labs(x = "Length (mm)",
y = "Weight (g)",
title = "")
gridExtra::grid.arrange(rufp1, rufp2)
vb = vbFuns(param="Typical") # from FSA package
f.starts <- vbStarts(fl~age,data=RedDrum) # vbStarts is an optimization algorithm designed to find the best params
f.fit <- nls(fl~vb(age,Linf,K,t0),data=RedDrum,start=f.starts)
coef(f.fit)
ggplot() +
geom_point(data=RedDrum, aes(x=age, y=fl)) +
geom_line(data=RedDrum, aes(x=age, y=predict(f.fit)), color="red") +
xlab("Age (years)") +
ylab("Fork Length (mm)") +
ggtitle("Red Drum Length at Age")
plot(f.fit)
# plot(nlstools::nlsResiduals(f.fit))
# Shows autocorrelation, qq plot, and standardized residuals
plot(f.fit)
ggplot() + geom_point(data=f.fit)
f.fit
plot(f.fit$m$resid())
plot(f.fit$m$resid() ~ f.fit$m$fitted())
plot(f.fit$m$resid() ~ f.fit$m$fitted())
plot(f.fit$m$resid() ~ f.fit$m$fitted())
abline(x=0)
plot(f.fit$m$resid() ~ f.fit$m$fitted())
abline(h = 0)
# plot(f.fit)
plot(f.fit$m$resid() ~ f.fit$m$fitted())
abline(h = 0)
# plot(nlstools::nlsResiduals(f.fit))
# Shows autocorrelation, qq plot, and standardized residuals
# plot(f.fit)
plot(f.fit$m$resid() ~ f.fit$m$fitted())
abline(h = 0, color="red")
# plot(nlstools::nlsResiduals(f.fit))
# Shows autocorrelation, qq plot, and standardized residuals
# plot(f.fit)
plot(f.fit$m$resid() ~ f.fit$m$fitted())
abline(h = 0, col="red")
# plot(nlstools::nlsResiduals(f.fit))
# Shows autocorrelation, qq plot, and standardized residuals
# plot(f.fit)
plot(f.fit$m$resid() ~ f.fit$m$fitted(), xlab="Fitted values", ylab="Residual values")
abline(h = 0, col="red")
# plot(nlstools::nlsResiduals(f.fit))
# Shows autocorrelation, qq plot, and standardized residuals
# plot(f.fit)
plot(f.fit$m$resid() ~ f.fit$m$fitted(), xlab="Fitted values", ylab="Residual values", main="VBGF of North East Atlantic Coast Red Drum")
abline(h = 0, col="red")
# plot(nlstools::nlsResiduals(f.fit))
# Shows autocorrelation, qq plot, and standardized residuals
# ---- Mortality rate ----------------------------
# get mortality from Then.etal.2014
getMtmax = function(lifespan){
M = 4.899 * lifespan^-0.916
M
}
# get mortality using Dulvy.etal.2004's method
getMDulvy.etal.2004 = function(lifespan, agemat){
w = (lifespan+agemat)/2 # average lifespan
M = 1/w
M
}
getRmax= function(method = "Smith.etal.1998", mortality = "Then.etal.2014", fec = NULL, litter = NULL, cycle = NULL, lifespan, agemat){
# Calculate natural mortality rate
if (mortality== "Dulvy.etal.2004") M = getMDulvy.etal.2004(lifespan = lifespan, agemat = agemat)
if (mortality== "Then.etal.2014") M = getMtmax(lifespan = lifespan)
if (is.numeric(mortality)) M = mortality
if(method=="Smith.etal.1998"){
tmax = lifespan
tmat = agemat
if (is.null(fec)) fec = litter/2/cycle else fec = fec
Z<-1.5*M
#this is equation 7 in the manuscript
l_alpha<-(1-exp(-(Z)))/((fec)*(1-exp(-(Z*(tmax-tmat+1)))))
#this is equation 6 in the manuscript
eq6 <- function(reb) 1-exp(-(M+reb))-l_alpha*(fec)*1.25*exp(-reb*tmat)*(1-exp(-(M+reb)*(tmax-tmat+1)))
r_Z<-uniroot(eq6, c(0,5), tol=1e-8)
return(r_Z$root*2)
}
}
spinyLife = subset(popgrowth(species_list = c("Squalus acanthias")), Locality=="Northwestern Atlantic")
spinyFec = fecundity(species_list = c("Squalus acanthias"))[1,]
spinyMat = subset(maturity(species_list = c("Squalus acanthias")), Locality=="Northwest Atlantic")
spinyLife = popgrowth(species_list = c("Squalus acanthias"))
View(spinyLife)
spinyLife$Locality
lifespan = mean(spinyLife$tmax, na.rm=T)
fecundity = (spinyFec$FecundityMin+spinyFec$FecundityMax) / 2 # mean of minimum and maximum fecundity
agemat = (spinyMat$AgeMatMin + spinyMat$AgeMatMin2) / 2 # mean of two records for minimum age at maturity
rmax = getRmax(method = "Smith.etal.1998", mortality = "Then.etal.2014", fec = fecundity, lifespan = lifespan, agemat = agemat)
paste0("Intrinsic Growth Rate = ", round(rmax, 3))
popgrowth
b = c(0.1,0.1,0.1) # birth rates
d = c(0.04,0.1,0.125) # death rates
N0 = c(500,500,500) # starting population number
Time = seq(0,20,0.5) # time steps
Nt = matrix(NA, nrow = length(Time), ncol = 3)
for (i in 1:3){
Nt[,i] = N0[i]*exp((b[i]-d[i])*Time)
}
plot(Nt[,1]~Time, type = "l", ylim = range(Nt))
lines(Nt[,2]~Time, col = "red")
lines(Nt[,3]~Time, col = "blue")
r = 0.5 # intrinsic growth rate
K = 1000 # carrying capacity
N0 = 50 # starting population number
Time = seq(0,25,1) # time
Nt = c()
Nt[1] = N0
Ct = 10 # catch or harvest
for (i in 1:25){
Nt[i+1] = Nt[i] + r*Nt[i]*(1-Nt[i]/K) - Ct
}
plot(Nt~Time, type = "l", ylim = range(Nt))
b = c(0.9,0.1,0.1) # birth rates
d = c(0.04,0.1,0.125) # death rates
N0 = c(500,500,500) # starting population number
Time = seq(0,20,0.5) # time steps
Nt = matrix(NA, nrow = length(Time), ncol = 3)
for (i in 1:3){
Nt[,i] = N0[i]*exp((b[i]-d[i])*Time)
}
plot(Nt[,1]~Time, type = "l", ylim = range(Nt))
lines(Nt[,2]~Time, col = "red")
lines(Nt[,3]~Time, col = "blue")
lm1 = lm(log(HerringBWE$ssb)~log(HerringBWE$spawning.year))
ggplot() + geom_point(data=HerringBWE, aes(x=log(spawning.year), y=log(ssb))) + geom_line(data=HerringBWE, aes(x=log(spawning.year), y=lm1$fitted.values))
plot(lm1)
ggplot() + geom_point(data=HerringBWE, aes(x=log(spawning.year), y=log(ssb/recruits))) + geom_line(data=HerringBWE, aes(x=log(spawning.year), y=lm2$fitted.values))
lm2 = lm(data=HerringBWE, log(ssb/recruits)~spawning.year)
ggplot() + geom_point(data=HerringBWE, aes(x=log(spawning.year), y=log(ssb/recruits))) + geom_line(data=HerringBWE, aes(x=log(spawning.year), y=lm2$fitted.values))
ggplot() + geom_point(data=HerringBWE, aes(x=log(spawning.year), y=log(ssb))) + geom_line(data=HerringBWE, aes(x=log(spawning.year), y=lm1$fitted.values))
lm1 = lm(log(HerringBWE$ssb)~log(HerringBWE$spawning.year))
ggplot() + geom_point(data=HerringBWE, aes(x=log(HerringBWE$spawning.year), y=log(HerringBWE$ssb)))
lm1 = lm(log(HerringBWE$ssb)~log(HerringBWE$spawning.year))
ggplot() + geom_point(data=HerringBWE, aes(x=log(HerringBWE$spawning.year), y=log(HerringBWE$ssb)))
lm1 = lm(log(HerringBWE$ssb)~log(HerringBWE$spawning.year))
ggplot() + geom_point(data=HerringBWE, aes(x=log(spawning.year), y=log(ssb)))
lm1 = lm(log(HerringBWE$ssb)~log(HerringBWE$spawning.year))
ggplot() + geom_point(data=HerringBWE, aes(x=log(spawning.year), y=log(ssb))) + geom_line(data=HerringBWE, aes(x=log(spawning.year), y=lm1$fitted.values))
lm2 = lm(log(HerringBWE$ssb/HerringBWE$recruits)~log(HerringBWE$spawning.year))
ggplot() + geom_point(data=HerringBWE, aes(x=log(ssb/recruits), y=lm2.fitted.values))
lm2 = lm(log(HerringBWE$ssb/HerringBWE$recruits)~log(HerringBWE$spawning.year))
ggplot() + geom_point(data=HerringBWE, aes(x=log(ssb/recruits), y=lm2$fitted.values))
plot(lm2)
lm2 = lm(log(HerringBWE$ssb/HerringBWE$recruits)~log(HerringBWE$spawning.year))
ggplot() + geom_point(data=HerringBWE, aes(x=log(ssb/recruits), y=log(spawning.year))) + geom_line(data=HerringBWE, aes(x=log(ssb/recruits), y=lm2$fitted.values))
lm2 = lm(log(HerringBWE$ssb/HerringBWE$recruits)~log(HerringBWE$spawning.year))
ggplot() + geom_point(data=HerringBWE, aes(x=log(ssb/recruits), y=log(spawning.year))) + geom_line(data=HerringBWE, aes(x=log(ssb/recruits), y=lm2$fitted.values))
lm2 = lm(log(HerringBWE$ssb/HerringBWE$recruits)~spawning.year)
lm2 = lm(log(HerringBWE$ssb/HerringBWE$recruits)~HerringBWE$spawning.year)
ggplot() + geom_point(data=HerringBWE, aes(x=log(ssb/recruits), y=log(spawning.year))) + geom_line(data=HerringBWE, aes(x=log(ssb/recruits), y=lm2$fitted.values))
lm2 = lm(data=HerringBWE, log(ssb/recruits)~spawning.year)
ggplot() + geom_point(data=HerringBWE, aes(x=log(ssb/recruits), y=spawning.year))
ggplot() + geom_point(data=HerringBWE, aes(x=log(ssb/recruits), y=log(spawning.year)))
lm2 = lm(data=HerringBWE, log(ssb/recruits)~spawning.year)
ggplot() + geom_point(data=HerringBWE, aes(x=log(ssb/recruits), y=log(spawning.year))) + geom_line(data=HerringBWE, aes(x=spawning.year, y=lm2$fitted.values))
lm2 = lm(data=HerringBWE, log(ssb/recruits)~log(spawning.year))
ggplot() + geom_point(data=HerringBWE, aes(x=log(ssb/recruits), y=log(spawning.year))) + geom_line(data=HerringBWE, aes(x=spawning.year, y=lm2$fitted.values))
lm2 = lm(data=HerringBWE, log(ssb/recruits)~spawning.year)
ggplot() + geom_point(data=HerringBWE, aes(x=log(spawning.year), y=log(ssb/recruits))) + geom_line(data=HerringBWE, aes(x=log(spawning.year), y=lm2$fitted.values))
lm1 = lm(log(HerringBWE$ssb)~log(HerringBWE$spawning.year))
p1 = ggplot() + geom_point(data=HerringBWE, aes(x=log(spawning.year), y=log(ssb))) + geom_line(data=HerringBWE, aes(x=log(spawning.year), y=lm1$fitted.values))
lm2 = lm(data=HerringBWE, log(ssb/recruits)~spawning.year)
p2 = ggplot() + geom_point(data=HerringBWE, aes(x=log(spawning.year), y=log(ssb/recruits))) + geom_line(data=HerringBWE, aes(x=log(spawning.year), y=lm2$fitted.values))
gridextra::grid.arrange(p1, p2)
lm1 = lm(log(HerringBWE$ssb)~log(HerringBWE$spawning.year))
p1 = ggplot() + geom_point(data=HerringBWE, aes(x=log(spawning.year), y=log(ssb))) + geom_line(data=HerringBWE, aes(x=log(spawning.year), y=lm1$fitted.values))
lm2 = lm(data=HerringBWE, log(ssb/recruits)~spawning.year)
p2 = ggplot() + geom_point(data=HerringBWE, aes(x=log(spawning.year), y=log(ssb/recruits))) + geom_line(data=HerringBWE, aes(x=log(spawning.year), y=lm2$fitted.values))
gridExtra::grid.arrange(p1, p2)
plot(lm2)
lm1 = lm(log(HerringBWE$ssb)~HerringBWE$spawning.year)
p1 = ggplot() + geom_point(data=HerringBWE, aes(x=log(spawning.year), y=log(ssb))) + geom_line(data=HerringBWE, aes(x=log(spawning.year), y=lm1$fitted.values))
lm2 = lm(data=HerringBWE, log(ssb/recruits)~spawning.year)
p2 = ggplot() + geom_point(data=HerringBWE, aes(x=log(spawning.year), y=log(ssb/recruits))) + geom_line(data=HerringBWE, aes(x=log(spawning.year), y=lm2$fitted.values))
gridExtra::grid.arrange(p1, p2)
lm1 = lm(log(HerringBWE$ssb)~log(HerringBWE$spawning.year))
p1 = ggplot() + geom_point(data=HerringBWE, aes(x=log(spawning.year), y=log(ssb))) + geom_line(data=HerringBWE, aes(x=log(spawning.year), y=lm1$fitted.values))
lm2 = lm(data=HerringBWE, log(ssb/recruits)~log(spawning.year))
p2 = ggplot() + geom_point(data=HerringBWE, aes(x=log(spawning.year), y=log(ssb/recruits))) + geom_line(data=HerringBWE, aes(x=log(spawning.year), y=lm2$fitted.values))
gridExtra::grid.arrange(p1, p2)
plot(lm2)
lm1 = lm(log(HerringBWE$ssb)~log(HerringBWE$spawning.year))
p1 = ggplot() + geom_point(data=HerringBWE, aes(x=log(spawning.year), y=log(ssb))) + geom_line(data=HerringBWE, aes(x=log(spawning.year), y=lm1$fitted.values))
lm2 = lm(data=HerringBWE, log(ssb/recruits)~log(spawning.year))
p2 = ggplot() + geom_point(data=HerringBWE, aes(x=log(spawning.year), y=log(ssb/recruits))) + geom_line(data=HerringBWE, aes(x=log(spawning.year), y=predict(lm2)))
gridExtra::grid.arrange(p1, p2)
plot(lm2)
lm1 = lm(log(HerringBWE$ssb)~log(HerringBWE$spawning.year))
p1 = ggplot() + geom_point(data=HerringBWE, aes(x=log(spawning.year), y=log(ssb))) + geom_line(data=HerringBWE, aes(x=log(spawning.year), y=predict(lm1))) + xlab("log spawning year") + ylab("spawning stock biomass (tons)") + ggtitle("SSB vs Spawning year of Blackwater Estuary Herring")
lm2 = lm(data=HerringBWE, log(ssb/recruits)~log(spawning.year))
p2 = ggplot() + geom_point(data=HerringBWE, aes(x=log(spawning.year), y=log(ssb/recruits))) + geom_line(data=HerringBWE, aes(x=log(spawning.year), y=predict(lm2))) + xlab("log spawning year") + ylab("spawning stock biomass per recruit (tons)") + ggtitle("")
gridExtra::grid.arrange(p1, p2)
p1
p2
lm1 = lm(log(HerringBWE$ssb)~log(HerringBWE$spawning.year))
p1 = ggplot() + geom_point(data=HerringBWE, aes(x=log(spawning.year), y=log(ssb))) + geom_line(data=HerringBWE, aes(x=log(spawning.year), y=predict(lm1))) + xlab("log spawning year") + ylab("spawning stock biomass (tons)") + ggtitle("SSB vs Spawning year of Blackwater Estuary Herring")
lm2 = lm(data=HerringBWE, log(ssb/recruits)~log(spawning.year))
p2 = ggplot() + geom_point(data=HerringBWE, aes(x=log(spawning.year), y=log(ssb/recruits))) + geom_line(data=HerringBWE, aes(x=log(spawning.year), y=predict(lm2))) + xlab("log spawning year") + ylab("spawning stock biomass per recruit (tons)") + ggtitle("SSB vs Spawning year of Blackwater Estuary Herring")
p1
p2
par(mfrow=c(2,2))
plot(lm2)
BlackDrum2001 = na.omit(BlackDrum2001)
names(BlackDrum2001)
ggplot() + geom_point(data=BlackDrum2001, aes(x=weight, y=length))
BlackDrum2001 = na.omit(BlackDrum2001)
ggplot() + geom_point(data=BlackDrum2001, aes(x=weight, y=length))
library(FSAdata)
BlackDrum2001
BlackDrum2001_new = na.omit(BlackDrum2001)
ggplot() + geom_point(data=BlackDrum2001_new, aes(x=weight, y=length))
ggplot() + geom_point(data=BlackDrum2001_new, aes(x=length, y=weight))
BlackDrum2001_new = na.omit(BlackDrum2001)
ggplot() + geom_point(data=BlackDrum2001_new, aes(x=weight, y=tl))
blm1 = lm(data=BlackDrum2001_new, log(tl)~log(weight))
BlackDrum2001_new = na.omit(BlackDrum2001)
blm1 = lm(data=BlackDrum2001_new, log(tl)~log(weight))
ggplot() + geom_point(data=BlackDrum2001_new, aes(x=log(weight), y=log(tl))) + geom_line(data=BlackDrum2001_new, aes(x=log(weight), y=predict(blm1)))
# ggplot() + geom_point(data=BlackDrum2001_new, aes(x=weight, y=tl))
BlackDrum2001_new = na.omit(BlackDrum2001)
blm1 = lm(data=BlackDrum2001_new, log(tl)~log(weight))
ggplot() + geom_point(data=BlackDrum2001_new, aes(x=log(weight), y=log(tl))) + geom_line(data=BlackDrum2001_new, aes(x=log(weight), y=predict(blm1))) + xlab("log weight (kg)") + ylab("log length (mm)") + ggtitle("Weight vs Length of Atlantic Black Drum")
# ggplot() + geom_point(data=BlackDrum2001_new, aes(x=weight, y=tl))
model_bd = nls(weight~a*tl^b, start=list(a=160,b=3), data=BlackDrum2001_new)
model_bd = nls(weight~a*tl^b, start=list(a=160,b=3), data=BlackDrum2001_new)
ggplot() + geom_point(data=BlackDrum2001_new, aes(x=weight, y=tl)) + geom_line(data=BlackDrum2001_new, aes(x=weight, y=predict(model_bd)))
summary(model_bd)
model_bd = nls(weight~a*tl^b, start=list(a=160,b=3), data=BlackDrum2001_new)
ggplot() + geom_point(data=BlackDrum2001_new, aes(x=weight, y=tl)) + geom_line(data=BlackDrum2001_new, aes(x=weight, y=model_bd$m$fitted()))
model_bd = nls(weight~a*tl^b, start=list(a=160,b=3), data=BlackDrum2001_new)
ggplot() + geom_point(data=BlackDrum2001_new, aes(x=tl, y=weight)) + geom_line(data=BlackDrum2001_new, aes(x=weight, y=predict(model_bd)))
model_bd = nls(weight~a*tl^b, start=list(a=160,b=3), data=BlackDrum2001_new)
ggplot() + geom_point(data=BlackDrum2001_new, aes(x=weight, y=tl)) + geom_line(data=BlackDrum2001_new, aes(x=weight, y=predict(model_bd)))
model_bd = nls(weight~a*tl^b, start=list(a=160,b=3), data=BlackDrum2001_new)
ggplot() + geom_point(data=BlackDrum2001_new, aes(x=tl, y=weight)) + geom_line(data=BlackDrum2001_new, aes(x=length, y=predict(model_bd)))
model_bd = nls(weight~a*tl^b, start=list(a=160,b=3), data=BlackDrum2001_new)
ggplot() + geom_point(data=BlackDrum2001_new, aes(x=tl, y=weight)) + geom_line(data=BlackDrum2001_new, aes(x=tl, y=predict(model_bd)))
BlackDrum2001_new = na.omit(BlackDrum2001)
blm1 = lm(data=BlackDrum2001_new, log(weight)~log(tl))
ggplot() + geom_point(data=BlackDrum2001_new, aes(x=log(tl), y=log(weight))) + geom_line(data=BlackDrum2001_new, aes(x=log(tl), y=predict(blm1))) + xlab("log weight (kg)") + ylab("log length (mm)") + ggtitle("Weight vs Length of Atlantic Black Drum")
# ggplot() + geom_point(data=BlackDrum2001_new, aes(x=weight, y=tl))
BlackDrum2001_new = na.omit(BlackDrum2001)
blm1 = lm(data=BlackDrum2001_new, log(weight)~log(tl))
ggplot() + geom_point(data=BlackDrum2001_new, aes(x=log(tl), y=log(weight))) + geom_line(data=BlackDrum2001_new, aes(x=log(tl), y=predict(blm1))) + xlab("log total length (mm)") + ylab("log weight (kg)") + ggtitle("Weight vs Length of Atlantic Black Drum")
# ggplot() + geom_point(data=BlackDrum2001_new, aes(x=weight, y=tl))
model_bd = nls(weight~a*tl^b, start=list(a=160,b=3), data=BlackDrum2001_new)
ggplot() + geom_point(data=BlackDrum2001_new, aes(x=tl, y=weight)) + geom_line(data=BlackDrum2001_new, aes(x=tl, y=predict(model_bd)))
knitr::include_graphics("VBGF.JPG")
names(Bonito)
ggplot() + geom_point(data=Bonito, aes(x=age, y=fl, color=sex))
ggplot() + geom_point(data=Bonito, aes(x=age, y=fl, color=sex)) +
scale_color_manual(c("red", "grey55", "blue"))
ggplot() + geom_point(data=Bonito, aes(x=age, y=fl, color=sex)) +
scale_color_manual("red", "blue", "grey")
ggplot() + geom_point(data=Bonito, aes(x=age, y=fl, color=sex)) +
scale_color_manual(values=c("red", "blue", "grey"))
ggplot() + geom_point(data=Bonito, aes(x=age, y=fl, color=sex)) +
scale_color_manual(values=c("red", "grey", "blue"))
BlackDrum = na.omit(BlackDrum2001)
BlackDrum
tl=(BlackDrum$tl)
weight=(BlackDrum$weight)
blm1 = lm(data=BlackDrum, log(tl)~log(weight))
ggplot() + geom_point(data=BlackDrum, aes=(x=log(weight), y=log(tl))) + geom_line(data=BlackDrum, aes(x=log(weight), y=predict(blm1)))+xlab("Log Weight (kg)")+ylab("Log Length (mm)")
ggplot() + geom_point(data=BlackDrum, aes=(x=log(weight), y=log(tl))) +
names(Bonito)
Bonito_f = subset(Bonito, sex=="Female")
Bonito_m = subset(Bonito, sex=="Male")
f.starts_f <- vbStarts(fl~age,data=Bonito_f) # vbStarts is an optimization algorithm designed to find the best params
f.fit_f <- nls(fl~vb(age,Linf,K,t0),data=Bonito_f,start=f.starts_f)
f.starts_m <- vbStarts(fl~age,data=Bonito_m) # vbStarts is an optimization algorithm designed to find the best params
f.fit_m <- nls(fl~vb(age,Linf,K,t0),data=Bonito_m,start=f.starts_m)
ggplot() + geom_point(data=Bonito, aes(x=age, y=fl, color=sex)) +
scale_color_manual(values=c("red", "grey", "blue")) + xlab("Age (years)") + ylab("Fork Length (cm)") + geom_line(data=Bonito_f, aes(x=age, y=predict(f.fit_f)), color="red") + geom_line(data=Bonito_m, aes(x=age, y=predict(f.fit_m)), color="blue")
params = coef(f.fit_f)
Linf = params[1]
K = params[2]
t0 = params[3]
La = Linf*(1-exp(-K*(1.5-t0)))
La[[1]]
?exp
