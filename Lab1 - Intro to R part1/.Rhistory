require(FSAdata)
dat = PygmyWFBC
dat_clim = read.csv('dinalake_climate.csv')
colnames(dat)
plot(dat$wt~dat$oto_age)
plot(dat$wt~dat$month)
plot(dat$wt~dat$sex)
plot(dat$wt~dat$tl)
reg1 = lm(wt~oto_age+month+tl+sex, data=dat)
reg2 = lm(wt~log(oto_age)+month+tl+sex, data=dat)
reg3 = lm(wt~oto_age+month+log(tl)+sex, data=dat)
reg4 = lm(log(wt)~oto_age+month+log(tl)+sex, data=dat)
summary(reg1)
summary(reg2)
summary(reg3)
summary(reg4)
print(acf(dat$month))
acf(reg4$residuals)
sessionInfo()reg2 = glm(wt~oto_age+month+tl+sex, data=dat, family=poisson)
summary(reg2)
dev.cur()
dev.off(i)
dev.off()
getOption("device")
dev.set(which = dev.next())
acf(reg4$residuals)
acf(reg4$residuals)
dev.off(1)
dev.off(0)
acf(reg4$residuals)
dev.new()
acf(reg4$residuals)
update.packages()
yes
update.packages()
require(updateR)
install.packages('updateR')
install.packages('updateR')
knitr::opts_chunk$set(echo = TRUE)
plot(mtcars)
acf(reg4$residuals)
reg4 = lm(log(wt)~oto_age+month+log(tl)+sex, data=dat)
dat_clim = read.csv('dinalake_climate.csv')
reg4 = lm(log(wt)~oto_age+month+log(tl)+sex, data=dat)
print(acf(dat$month))
acf(reg4$residuals)
reg4 = lm(log(wt)~oto_age+month+log(tl)+sex, data=dat)
plot(mtcars)
options(bitmapType='cairo')
options(bitmapType='cairo')
plot(mtcars)
install.packages("installr")
updateR()
require(installr)
updateR()
updateR()
#' Create Connection to Pelagic Database on Baseline3.
#'
#' Create Connection to Pelagic Database on Baseline3.
#' This connection grant permission to select on tables: master, timseries, iccatt2ce, iotccell, wcpfc, iattc.
#' @param dbuser role name for database
#' @param dbpass database password for role `dbuser`
#' @export
connectKennedy = function(dbuser="jjeremy1", dbpass="Olimonsterman8"){
require(RPostgreSQL)
dbname = "kennedylakes"
dbhost <- "localhost"
dbport <- 5432
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host=dbhost, port=dbport,
dbname=dbname,  user=dbuser, password=dbpass
)
}
shiny::runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
shiny::runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
shiny::runApp('Dropbox/natgeo')
shiny::runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
shiny::runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
shiny::runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
library(reticulate)
use_python("/Users/jjeremy1/Library/r-miniconda/bin/python", required = T)
shiny::runApp('Dropbox/natgeo')
conda_list()
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
library(reticulate)
use_python("/Users/jjeremy1/Library/r-miniconda/bin/python", required = T)
import('cv2')
library(reticulate)
use_python("/Users/jjeremy1/opt/anaconda3", required = T)
Sys.which('python')
library(reticulate)
import('cv2')
conda_list()
use_python("/Users/jjeremy1/Library/r-miniconda/envs/r-reticulate", required = T)
conda_list()
use_python("/Users/jjeremy1/opt/anaconda3/envs/Portfolio-JJ/bin/python", required = T)
library(reticulate)
use_python("/Users/jjeremy1/opt/anaconda3/envs/Portfolio-JJ/bin/python", required = T)
import('cv2')
shiny::runApp('Dropbox/natgeo')
withSpinner
grep(withSpinner, "center")
grep('center', 'center')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
shiny::runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
shiny::runApp('Dropbox/natgeo')
shiny::runApp('Dropbox/natgeo')
paste0("run_SL('",'someting.mp4',"', 0.5)")
shiny::runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
shiny::runApp('Dropbox/natgeo')
shiny::runApp('Dropbox/natgeo')
runApp('Dropbox/natgeo')
require(RPostgreSQL)
require(DBI)
require(RH2)
require(chron)
require(RJDBC)
require(rJava)
# connects to server pelagic database
connectPelagic = function (dbuser, dbpass)
{
dbname = "pelagic"
dbhost <- "sp2.cs.vt.edu"
dbport <- 5432
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host = dbhost, port = dbport, dbname = dbname,
user = dbuser, password = dbpass)
}
# retrieves table data specified from SQL statement
getDat = function (dbuser, dbpass)
{
con = connectPelagic(dbuser, dbpass)
dat = dbSendQuery(con, statement = paste("select *
from sharkpulse;",
sep = ""))
dat = fetch(dat, n = -1)
dat
}
# returns data
dat = getDat(dbuser='cs4624', dbpass='validation')
head(dat)
memory.limit()
system('free -m')
setwd('~/Dropbox/FisheriesManagement2023/Lab1 - Intro to R part1/')
lab_path = dirname(rstudioapi::getSourceEditorContext()$path)
lab_path
catch
knitr::opts_chunk$set(echo=TRUE)
set.seed(9999)
catch1 <- data.frame("year" = 2010:2014, "catch" = c(5000,5200,7100,4900,5150))
catch
catch1
newcatch <- catch1[,1]
newcatch
newcatch <- catch1[1,]
newcatch
newcatch <- catch1[1]
newcatch
catch1[4,]
catch1[4,]
library(FSAdata)
library(rfisheries)
library(FSAdata)
data(RedDrum)
ggplot(RedDrum) +
geom_point(aes(x=age, y=fl), col="red") +
ylab("Fork length (mm)")+
xlab("Age (year)")+
ggtitle("Red Drum length at age")
# load the package
library(tidyverse)
library(FSAdata)
data(RedDrum)
ggplot(RedDrum) +
geom_point(aes(x=age, y=fl), col="red") +
ylab("Fork length (mm)")+
xlab("Age (year)")+
ggtitle("Red Drum length at age")
FSAdata::AlewifeLH
list(FSAdata)
of_species_codes()
of_species_codes()
data("BluegillIL")
BluegillIL
data(BassFL)
BassFL
of_species_codes()
catch1[4,1] # row, column
catch1[4,]
newcatch <- catch1[1]
newcatch
cars
rbind(cars, catch1)
listObject <- list("Virginia Tech", 1, F)
listObject
str(listObject)
x
cbind
m <- cbind(1, 1:7) # the '1' (= shorter vector) is recycled
m
cbind(2, 1:7) # the '1' (= shorter vector) is recycled
cbind(3, 1:7) # the '1' (= shorter vector) is recycled
cbind(3, 'a') # the '1' (= shorter vector) is recycled
cbind(3, c(1,3,4,5)) # the '1' (= shorter vector) is recycled
# write another dataframe with same column names
catch2 <- data.frame("year"=c(2015:2019),  "catch"=c(4100,5700,3850,5500,4900))
catch1
catch2
cbind(catch1, catch2)
cbind("year"=2023, catch=4300)
cbind("year"=2023, catch=4300, hooks=10000)
cbind(yeardata.frame("year" = 2010:2014, "catch" = c(5000,5200,7100,4900,5150))=2023, catch=4300, hooks=10000)
data.frame("year" = 2010:2014, "catch" = c(5000,5200,7100,4900,5150))
cbind("year" = 2010:2014, "catch" = c(5000,5200,7100,4900,5150))
test = cbind("year" = 2010:2014, "catch" = c(5000,5200,7100,4900,5150))
class(test)
catch1
cbind(catch1, hooks=12)
allcatch
cbind(catch1, hooks = c(20000, 25000, 23000, 31000, 19000, 21000, 21000, 30000, 18000, 34000))
allcatch$hooks = c(20000, 25000, 23000, 31000, 19000, 21000, 21000, 30000, 18000, 34000)
allcatch <- rbind(catch1, catch2)
allcatch
allcatch$hooks = c(20000, 25000, 23000, 31000, 19000, 21000, 21000, 30000, 18000, 34000)
cbind(allcatch, hooks = c(20000, 25000, 23000, 31000, 19000, 21000, 21000, 30000, 18000, 34000))
cbind(allcatch, hooks = c(20000, 25000, 23000, 31000, 19000, 21000, 21000, 30000, 18000, 34000))
# these two lines do the same thing
cbind(allcatch, hooks = c(20000, 25000, 23000, 31000, 19000, 21000, 21000, 30000, 18000, 34000))
allcatch$hooks = c(20000, 25000, 23000, 31000, 19000, 21000, 21000, 30000, 18000, 34000)
# write another dataframe with same column names
catch2 <- data.frame("year"=c(2015:2019),  "catch"=c(4100,5700,3850,5500,4900))
allcatch <- rbind(catch1, catch2)
allcatch
# these two lines do the same thing
cbind(allcatch, hooks = c(20000, 25000, 23000, 31000, 19000, 21000, 21000, 30000, 18000, 34000))
allcatch$hooks = c(20000, 25000, 23000, 31000, 19000, 21000, 21000, 30000, 18000, 34000)
merg
merge
?merge()
merge(catch1, catch2)
catch2
catch1
merge(catch1, catch2, by=year)
merge(catch1, catch2, by='year')
allcatch$catch_per_hook = allcatch$catch/allcatch$hooks
allcatch
allcatch$catch_per_hook = allcatch$catch / allcatch$hooks
allcatch
merge(catch1, catch2, all=T)
merge(catch1, catch2, by='catch')
merge(catch1, catch2, by="year")
merge(catch1$year, catch2$year, by="year")
merge(catch1, catch2, by.x="year")
merge(catch1, catch2, by.x="year", by.y="catch")
merge(catch1, catch2)
merge(catch1, catch2, by=c("year", "catch"))
catch1
catch2
merge(catch1, catch2, by="year")
catch3 <- data.frame("year"=c(2011:2015),  "catch"=c(800,59,399,1003))
2011:2015
catch3 <- data.frame("year"=c(2011:2015),  "catch"=c(800,59,399,1003, 220))
merge(allcatch, catch3, by="year")
merge(allcatch, catch3, by.x="year", by.y="catch")
merge(allcatch, catch3, by.x="year", by.y="catch")
merge(allcatch, catch3, by.x="year")
merge(allcatch, catch3, by="year")
